{"ast":null,"code":"import axios from 'axios';\n\n// Configura el encabezado con el token de autenticaci贸n en cada solicitud\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/gestion/api'\n});\n\n// Interceptor para incluir el token en cada solicitud\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Funci贸n para obtener los datos del usuario\nexport const getUserData = async userId => {\n  const response = await api.get(`/usuarios/${userId}/`);\n  return response.data;\n};\nexport const updateUserData = async (userId, data) => {\n  const response = await axios.put(`http://127.0.0.1:8000/gestion/api/usuarios/${userId}`, data);\n  return response.data;\n};\nexport const updatePassword = async (userId, currentPassword, newPassword) => {\n  const response = await axios.put(`/http://127.0.0.1:8000/gestion/api/usuarios/${userId}/password`, {\n    current_password: currentPassword,\n    new_password: newPassword\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","getUserData","userId","response","get","data","updateUserData","put","updatePassword","currentPassword","newPassword","current_password","new_password"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/services/userService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configura el encabezado con el token de autenticaci贸n en cada solicitud\r\nconst api = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/gestion/api',\r\n});\r\n\r\n// Interceptor para incluir el token en cada solicitud\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Funci贸n para obtener los datos del usuario\r\nexport const getUserData = async (userId) => {\r\n  const response = await api.get(`/usuarios/${userId}/`);\r\n  return response.data;\r\n};\r\n\r\n\r\nexport const updateUserData = async (userId, data) => {\r\n  const response = await axios.put(`http://127.0.0.1:8000/gestion/api/usuarios/${userId}`, data);\r\n  return response.data;\r\n};\r\n\r\nexport const updatePassword = async (userId, currentPassword, newPassword) => {\r\n  const response = await axios.put(`/http://127.0.0.1:8000/gestion/api/usuarios/${userId}/password`, {\r\n    current_password: currentPassword,\r\n    new_password: newPassword,\r\n  });\r\n  return response.data;\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAASH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAOC,MAAM,IAAK;EAC3C,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAC,aAAaF,MAAM,GAAG,CAAC;EACtD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAGD,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOJ,MAAM,EAAEG,IAAI,KAAK;EACpD,MAAMF,QAAQ,GAAG,MAAMjB,KAAK,CAACqB,GAAG,CAAC,8CAA8CL,MAAM,EAAE,EAAEG,IAAI,CAAC;EAC9F,OAAOF,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAON,MAAM,EAAEO,eAAe,EAAEC,WAAW,KAAK;EAC5E,MAAMP,QAAQ,GAAG,MAAMjB,KAAK,CAACqB,GAAG,CAAC,+CAA+CL,MAAM,WAAW,EAAE;IACjGS,gBAAgB,EAAEF,eAAe;IACjCG,YAAY,EAAEF;EAChB,CAAC,CAAC;EACF,OAAOP,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}