{"ast":null,"code":"// src/services/authService.js\n\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8000/gestion/auth'; // Cambia la URL según la configuración de tu backend\n\n// Registrar un nuevo usuario\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register/`, userData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Obtener el CSRF token de las cookies\n\nconst getCsrfToken = () => {\n  const cookie = document.cookie.split('; ').find(row => row.startsWith('csrftoken='));\n  return cookie ? cookie.split('=')[1] : null;\n};\nexport const loginUser = async credentials => {\n  try {\n    const csrfToken = getCsrfToken();\n    const response = await axios.post(`${API_URL}/login/`, credentials, {\n      headers: {\n        'X-CSRFToken': csrfToken // Añadir el token CSRF\n      }\n    });\n    console.log('TOKEN RECIBIDO (authService):', response.data); // Verifica el token CSRF\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token); // Guarda el token en localStorage\n    }\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Obtener el usuario actual a partir del token almacenado\nexport const getCurrentUser = () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n\n    // Decodificar el token para obtener la información del usuario\n    // Asegúrate de que tu backend incluya la información del usuario en el token JWT\n    const user = JSON.parse(atob(token.split('.')[1])); // Decodificar el payload del JWT\n    return user;\n  } catch (error) {\n    return null;\n  }\n};\n\n// Cerrar sesión\nexport const logoutUser = () => {\n  localStorage.removeItem('token');\n};\n\n// Verificar si el usuario está autenticado\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token; // Devuelve true si el token existe\n};","map":{"version":3,"names":["axios","API_URL","registerUser","userData","response","post","data","error","getCsrfToken","cookie","document","split","find","row","startsWith","loginUser","credentials","csrfToken","headers","console","log","token","localStorage","setItem","getCurrentUser","getItem","user","JSON","parse","atob","logoutUser","removeItem","isAuthenticated"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000/gestion/auth';  // Cambia la URL según la configuración de tu backend\r\n\r\n// Registrar un nuevo usuario\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register/`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Obtener el CSRF token de las cookies\r\n\r\nconst getCsrfToken = () => {\r\n  const cookie = document.cookie\r\n    .split('; ')\r\n    .find(row => row.startsWith('csrftoken='));\r\n  return cookie ? cookie.split('=')[1] : null;\r\n};\r\n\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const csrfToken = getCsrfToken();\r\n    const response = await axios.post(`${API_URL}/login/`, credentials, {\r\n      headers: {\r\n        'X-CSRFToken': csrfToken,  // Añadir el token CSRF\r\n      },\r\n    });\r\n    console.log('TOKEN RECIBIDO (authService):', response.data);  // Verifica el token CSRF\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token); // Guarda el token en localStorage\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener el usuario actual a partir del token almacenado\r\nexport const getCurrentUser = () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return null;\r\n\r\n    // Decodificar el token para obtener la información del usuario\r\n    // Asegúrate de que tu backend incluya la información del usuario en el token JWT\r\n    const user = JSON.parse(atob(token.split('.')[1]));  // Decodificar el payload del JWT\r\n    return user;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\n// Cerrar sesión\r\nexport const logoutUser = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n// Verificar si el usuario está autenticado\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;  // Devuelve true si el token existe\r\n};\r\n\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,oCAAoC,CAAC,CAAE;;AAEvD;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,YAAY,EAAEE,QAAQ,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;;AAEA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,MAAM,GAAGC,QAAQ,CAACD,MAAM,CAC3BE,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,YAAY,CAAC,CAAC;EAC5C,OAAOL,MAAM,GAAGA,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;AAC7C,CAAC;AAED,OAAO,MAAMI,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAMC,SAAS,GAAGT,YAAY,CAAC,CAAC;IAChC,MAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,SAAS,EAAEe,WAAW,EAAE;MAClEE,OAAO,EAAE;QACP,aAAa,EAAED,SAAS,CAAG;MAC7B;IACF,CAAC,CAAC;IACFE,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEhB,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAE;IAC9D,IAAIF,QAAQ,CAACE,IAAI,CAACe,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEnB,QAAQ,CAACE,IAAI,CAACe,KAAK,CAAC,CAAC,CAAC;IACtD;IACA,OAAOjB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMiB,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACF,MAAMH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACJ,KAAK,EAAE,OAAO,IAAI;;IAEvB;IACA;IACA,MAAMK,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;IACrD,OAAOe,IAAI;EACb,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACd,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,UAAU,GAAGA,CAAA,KAAM;EAC9BR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMX,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO,CAAC,CAACJ,KAAK,CAAC,CAAE;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}