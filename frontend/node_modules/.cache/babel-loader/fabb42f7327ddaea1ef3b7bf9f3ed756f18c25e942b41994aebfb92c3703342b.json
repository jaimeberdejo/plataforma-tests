{"ast":null,"code":"var _jsxFileName = \"/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/pages/RealizarExamen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPreguntasByExamen, enviarRespuestas, getExamenById } from '../services/examenService';\nimport './RealizarExamen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealizarExamen = () => {\n  _s();\n  const {\n    examenId\n  } = useParams();\n  const navigate = useNavigate();\n  const [preguntas, setPreguntas] = useState([]);\n  const [respuestas, setRespuestas] = useState({});\n  const [preguntasPorPagina, setPreguntasPorPagina] = useState(1);\n  const [paginaActual, setPaginaActual] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [randomizarPreguntas, setRandomizarPreguntas] = useState(false);\n  const [randomizarOpciones, setRandomizarOpciones] = useState(false);\n  const [numeroPreguntas, setNumeroPreguntas] = useState(10);\n  const [tiempoEmpleado, setTiempoEmpleado] = useState(0); // Nuevo estado para el temporizador\n\n  useEffect(() => {\n    const fetchExamenData = async () => {\n      try {\n        const examenData = await getExamenById(examenId);\n        if (examenData) {\n          setPreguntasPorPagina(examenData.preguntas_por_pagina || 1);\n          setRandomizarPreguntas(examenData.randomizar_preguntas || false);\n          setRandomizarOpciones(examenData.randomizar_opciones || false);\n          setNumeroPreguntas(examenData.numero_preguntas || 10);\n        }\n        const response = await getPreguntasByExamen(examenId);\n        let preguntasObtenidas = response;\n        if (preguntasObtenidas && preguntasObtenidas.length > 0) {\n          if (randomizarPreguntas) {\n            preguntasObtenidas = mezclarArray(preguntasObtenidas);\n          }\n          if (randomizarOpciones) {\n            preguntasObtenidas = preguntasObtenidas.map(pregunta => ({\n              ...pregunta,\n              opciones: pregunta.opciones ? mezclarArray(pregunta.opciones) : []\n            }));\n          }\n          setPreguntas(preguntasObtenidas.slice(0, numeroPreguntas));\n        } else {\n          setPreguntas([]);\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener los datos del examen o las preguntas:', error);\n        setLoading(false);\n      }\n    };\n    fetchExamenData();\n  }, [examenId, randomizarPreguntas, randomizarOpciones, numeroPreguntas]);\n\n  // Iniciar temporizador\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTiempoEmpleado(prev => prev + 1); // Incrementar tiempo en 1 segundo\n    }, 1000);\n\n    // Limpiar el temporizador al desmontar el componente\n    return () => clearInterval(interval);\n  }, []);\n  const mezclarArray = array => {\n    if (!array || array.length === 0) return [];\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const totalPaginas = Math.ceil(preguntas.length / preguntasPorPagina);\n  const handleSelectRespuesta = (preguntaId, opcionId) => {\n    setRespuestas({\n      ...respuestas,\n      [preguntaId]: opcionId\n    });\n  };\n  const handleNextPage = () => {\n    if (paginaActual < totalPaginas) {\n      setPaginaActual(paginaActual + 1);\n    }\n  };\n  const handlePreviousPage = () => {\n    if (paginaActual > 1) {\n      setPaginaActual(paginaActual - 1);\n    }\n  };\n  const handleSubmitExamen = async () => {\n    clearInterval(); // Detener el temporizador\n\n    const respuestasCompletas = {};\n    preguntas.forEach(pregunta => {\n      respuestasCompletas[pregunta.id] = respuestas[pregunta.id] || null;\n    });\n    const respuestasJSON = {\n      respuestas: respuestasCompletas,\n      tiempo_empleado: tiempoEmpleado\n    };\n    try {\n      await enviarRespuestas(examenId, respuestasJSON);\n      navigate(`/examenes/${examenId}/resultado`);\n    } catch (error) {\n      console.error('Error al enviar las respuestas:', error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando preguntas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }, this);\n  }\n  if (!preguntas || preguntas.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No hay preguntas disponibles para este examen.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 12\n    }, this);\n  }\n  const indiceInicial = (paginaActual - 1) * preguntasPorPagina;\n  const indiceFinal = indiceInicial + preguntasPorPagina;\n  const preguntasPaginaActual = preguntas.slice(indiceInicial, indiceFinal);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"realizar-examen-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Realizando Examen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Tiempo empleado: \", Math.floor(tiempoEmpleado / 60), \":\", (tiempoEmpleado % 60).toString().padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), preguntasPaginaActual.map(pregunta => {\n      var _pregunta$opciones;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pregunta-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"opciones-list\",\n          children: (_pregunta$opciones = pregunta.opciones) === null || _pregunta$opciones === void 0 ? void 0 : _pregunta$opciones.map(opcion => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `pregunta-${pregunta.id}`,\n                value: opcion.id,\n                checked: respuestas[pregunta.id] === opcion.id,\n                onChange: () => handleSelectRespuesta(pregunta.id, opcion.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this), opcion.texto]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)\n          }, opcion.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, pregunta.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navegacion-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreviousPage,\n        disabled: paginaActual === 1,\n        children: \"Anterior\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), paginaActual < totalPaginas ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextPage,\n        children: \"Siguiente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitExamen,\n        children: \"Enviar Examen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(RealizarExamen, \"NfS7DVcysm8OC5PslReZLH8dUvc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RealizarExamen;\nexport default RealizarExamen;\nvar _c;\n$RefreshReg$(_c, \"RealizarExamen\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","getPreguntasByExamen","enviarRespuestas","getExamenById","jsxDEV","_jsxDEV","RealizarExamen","_s","examenId","navigate","preguntas","setPreguntas","respuestas","setRespuestas","preguntasPorPagina","setPreguntasPorPagina","paginaActual","setPaginaActual","loading","setLoading","randomizarPreguntas","setRandomizarPreguntas","randomizarOpciones","setRandomizarOpciones","numeroPreguntas","setNumeroPreguntas","tiempoEmpleado","setTiempoEmpleado","fetchExamenData","examenData","preguntas_por_pagina","randomizar_preguntas","randomizar_opciones","numero_preguntas","response","preguntasObtenidas","length","mezclarArray","map","pregunta","opciones","slice","error","console","interval","setInterval","prev","clearInterval","array","i","j","Math","floor","random","totalPaginas","ceil","handleSelectRespuesta","preguntaId","opcionId","handleNextPage","handlePreviousPage","handleSubmitExamen","respuestasCompletas","forEach","id","respuestasJSON","tiempo_empleado","children","fileName","_jsxFileName","lineNumber","columnNumber","indiceInicial","indiceFinal","preguntasPaginaActual","className","toString","padStart","_pregunta$opciones","texto","opcion","type","name","value","checked","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/pages/RealizarExamen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPreguntasByExamen, enviarRespuestas, getExamenById } from '../services/examenService';\nimport './RealizarExamen.css';\n\nconst RealizarExamen = () => {\n  const { examenId } = useParams();\n  const navigate = useNavigate();\n\n  const [preguntas, setPreguntas] = useState([]);\n  const [respuestas, setRespuestas] = useState({});\n  const [preguntasPorPagina, setPreguntasPorPagina] = useState(1);\n  const [paginaActual, setPaginaActual] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [randomizarPreguntas, setRandomizarPreguntas] = useState(false);\n  const [randomizarOpciones, setRandomizarOpciones] = useState(false);\n  const [numeroPreguntas, setNumeroPreguntas] = useState(10);\n  const [tiempoEmpleado, setTiempoEmpleado] = useState(0); // Nuevo estado para el temporizador\n\n  useEffect(() => {\n    const fetchExamenData = async () => {\n      try {\n        const examenData = await getExamenById(examenId);\n\n        if (examenData) {\n          setPreguntasPorPagina(examenData.preguntas_por_pagina || 1);\n          setRandomizarPreguntas(examenData.randomizar_preguntas || false);\n          setRandomizarOpciones(examenData.randomizar_opciones || false);\n          setNumeroPreguntas(examenData.numero_preguntas || 10);\n        }\n\n        const response = await getPreguntasByExamen(examenId);\n        let preguntasObtenidas = response;\n\n        if (preguntasObtenidas && preguntasObtenidas.length > 0) {\n          if (randomizarPreguntas) {\n            preguntasObtenidas = mezclarArray(preguntasObtenidas);\n          }\n\n          if (randomizarOpciones) {\n            preguntasObtenidas = preguntasObtenidas.map((pregunta) => ({\n              ...pregunta,\n              opciones: pregunta.opciones ? mezclarArray(pregunta.opciones) : [],\n            }));\n          }\n\n          setPreguntas(preguntasObtenidas.slice(0, numeroPreguntas));\n        } else {\n          setPreguntas([]);\n        }\n\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener los datos del examen o las preguntas:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchExamenData();\n  }, [examenId, randomizarPreguntas, randomizarOpciones, numeroPreguntas]);\n\n  // Iniciar temporizador\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTiempoEmpleado((prev) => prev + 1); // Incrementar tiempo en 1 segundo\n    }, 1000);\n\n    // Limpiar el temporizador al desmontar el componente\n    return () => clearInterval(interval);\n  }, []);\n\n  const mezclarArray = (array) => {\n    if (!array || array.length === 0) return [];\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  const totalPaginas = Math.ceil(preguntas.length / preguntasPorPagina);\n\n  const handleSelectRespuesta = (preguntaId, opcionId) => {\n    setRespuestas({\n      ...respuestas,\n      [preguntaId]: opcionId,\n    });\n  };\n\n  const handleNextPage = () => {\n    if (paginaActual < totalPaginas) {\n      setPaginaActual(paginaActual + 1);\n    }\n  };\n\n  const handlePreviousPage = () => {\n    if (paginaActual > 1) {\n      setPaginaActual(paginaActual - 1);\n    }\n  };\n\n  const handleSubmitExamen = async () => {\n    clearInterval(); // Detener el temporizador\n\n    const respuestasCompletas = {};\n    preguntas.forEach((pregunta) => {\n      respuestasCompletas[pregunta.id] = respuestas[pregunta.id] || null;\n    });\n\n    const respuestasJSON = {\n      respuestas: respuestasCompletas,\n      tiempo_empleado: tiempoEmpleado,\n    };\n\n    try {\n      await enviarRespuestas(examenId, respuestasJSON);\n      navigate(`/examenes/${examenId}/resultado`);\n    } catch (error) {\n      console.error('Error al enviar las respuestas:', error);\n    }\n  };\n\n  if (loading) {\n    return <div>Cargando preguntas...</div>;\n  }\n\n  if (!preguntas || preguntas.length === 0) {\n    return <div>No hay preguntas disponibles para este examen.</div>;\n  }\n\n  const indiceInicial = (paginaActual - 1) * preguntasPorPagina;\n  const indiceFinal = indiceInicial + preguntasPorPagina;\n  const preguntasPaginaActual = preguntas.slice(indiceInicial, indiceFinal);\n\n  return (\n    <div className=\"realizar-examen-container\">\n      <h2>Realizando Examen</h2>\n      <p>Tiempo empleado: {Math.floor(tiempoEmpleado / 60)}:{(tiempoEmpleado % 60).toString().padStart(2, '0')}</p>\n      \n      {preguntasPaginaActual.map((pregunta) => (\n        <div key={pregunta.id} className=\"pregunta-card\">\n          <h3>{pregunta.texto}</h3>\n          <ul className=\"opciones-list\">\n            {pregunta.opciones?.map((opcion) => (\n              <li key={opcion.id}>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name={`pregunta-${pregunta.id}`}\n                    value={opcion.id}\n                    checked={respuestas[pregunta.id] === opcion.id}\n                    onChange={() => handleSelectRespuesta(pregunta.id, opcion.id)}\n                  />\n                  {opcion.texto}\n                </label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n\n      <div className=\"navegacion-buttons\">\n        <button onClick={handlePreviousPage} disabled={paginaActual === 1}>\n          Anterior\n        </button>\n        {paginaActual < totalPaginas ? (\n          <button onClick={handleNextPage}>Siguiente</button>\n        ) : (\n          <button onClick={handleSubmitExamen}>Enviar Examen</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RealizarExamen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}