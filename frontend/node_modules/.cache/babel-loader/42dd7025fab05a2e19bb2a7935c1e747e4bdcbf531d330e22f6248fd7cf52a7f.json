{"ast":null,"code":"var _jsxFileName = \"/Users/JB/Documents/TFG/frontend/src/pages/RealizarExamen.js\",\n  _s = $RefreshSig$();\n// src/pages/RealizarExamen.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPreguntasByExamen, enviarRespuestas, getExamenById } from '../services/examenService'; // Asegúrate de tener esta función\nimport './RealizarExamen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealizarExamen = () => {\n  _s();\n  const {\n    examenId\n  } = useParams();\n  const navigate = useNavigate();\n  const [preguntas, setPreguntas] = useState([]);\n  const [respuestas, setRespuestas] = useState({});\n  const [preguntasPorPagina, setPreguntasPorPagina] = useState(1); // Número de preguntas por página\n  const [paginaActual, setPaginaActual] = useState(1); // Página actual\n  const [loading, setLoading] = useState(true);\n\n  // Fetch para obtener los datos del examen y las preguntas\n  useEffect(() => {\n    const fetchExamenData = async () => {\n      try {\n        const examenData = await getExamenById(examenId);\n\n        // Validar si el examenData tiene el campo preguntas_por_pagina\n        if (examenData && examenData.preguntas_por_pagina) {\n          setPreguntasPorPagina(examenData.preguntas_por_pagina || 1); // Si no tiene valor, por defecto 1\n        } else {\n          console.error('Datos del examen incompletos o no disponibles.');\n        }\n\n        // Obtener las preguntas del examen\n        const response = await getPreguntasByExamen(examenId);\n        setPreguntas(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener los datos del examen o las preguntas:', error);\n        setLoading(false);\n      }\n    };\n    fetchExamenData();\n  }, [examenId]);\n\n  // Calcular el número total de páginas basado en el número de preguntas y preguntas por página\n  const totalPaginas = Math.ceil(preguntas.length / preguntasPorPagina);\n\n  // Manejador de la selección de una respuesta\n  const handleSelectRespuesta = (preguntaId, opcionId) => {\n    setRespuestas({\n      ...respuestas,\n      [preguntaId]: opcionId\n    });\n  };\n\n  // Función para ir a la siguiente página\n  const handleNextPage = () => {\n    if (paginaActual < totalPaginas) {\n      setPaginaActual(paginaActual + 1);\n    }\n  };\n\n  // Función para ir a la página anterior\n  const handlePreviousPage = () => {\n    if (paginaActual > 1) {\n      setPaginaActual(paginaActual - 1);\n    }\n  };\n\n  // Enviar las respuestas del examen\n  const handleSubmitExamen = async () => {\n    try {\n      await enviarRespuestas(examenId, respuestas);\n      navigate(`/examenes/${examenId}/resultado`);\n    } catch (error) {\n      console.error('Error al enviar las respuestas:', error);\n    }\n  };\n\n  // Mostrar un loader si aún está cargando las preguntas\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando preguntas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Mostrar un mensaje si no hay preguntas en el examen\n  if (!preguntas || preguntas.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No hay preguntas disponibles para este examen.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Obtener las preguntas para la página actual\n  const indiceInicial = (paginaActual - 1) * preguntasPorPagina;\n  const indiceFinal = indiceInicial + preguntasPorPagina;\n  const preguntasPaginaActual = preguntas.slice(indiceInicial, indiceFinal);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"realizar-examen-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Realizando Examen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), preguntasPaginaActual.map(pregunta => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregunta-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: pregunta.texto\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"opciones-list\",\n        children: pregunta.opciones.map(opcion => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `pregunta-${pregunta.id}`,\n              value: opcion.id,\n              checked: respuestas[pregunta.id] === opcion.id,\n              onChange: () => handleSelectRespuesta(pregunta.id, opcion.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this), opcion.texto]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)\n        }, opcion.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, pregunta.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navegacion-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreviousPage,\n        disabled: paginaActual === 1,\n        children: \"Anterior\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), paginaActual < totalPaginas ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextPage,\n        children: \"Siguiente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitExamen,\n        children: \"Enviar Examen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(RealizarExamen, \"J04RXL1qJM+BOO1VkOKWymlN0PE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RealizarExamen;\nexport default RealizarExamen;\nvar _c;\n$RefreshReg$(_c, \"RealizarExamen\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","getPreguntasByExamen","enviarRespuestas","getExamenById","jsxDEV","_jsxDEV","RealizarExamen","_s","examenId","navigate","preguntas","setPreguntas","respuestas","setRespuestas","preguntasPorPagina","setPreguntasPorPagina","paginaActual","setPaginaActual","loading","setLoading","fetchExamenData","examenData","preguntas_por_pagina","console","error","response","data","totalPaginas","Math","ceil","length","handleSelectRespuesta","preguntaId","opcionId","handleNextPage","handlePreviousPage","handleSubmitExamen","children","fileName","_jsxFileName","lineNumber","columnNumber","indiceInicial","indiceFinal","preguntasPaginaActual","slice","className","map","pregunta","texto","opciones","opcion","type","name","id","value","checked","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/JB/Documents/TFG/frontend/src/pages/RealizarExamen.js"],"sourcesContent":["// src/pages/RealizarExamen.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPreguntasByExamen, enviarRespuestas, getExamenById } from '../services/examenService'; // Asegúrate de tener esta función\nimport './RealizarExamen.css';\n\nconst RealizarExamen = () => {\n  const { examenId } = useParams();\n  const navigate = useNavigate();\n\n  const [preguntas, setPreguntas] = useState([]);\n  const [respuestas, setRespuestas] = useState({});\n  const [preguntasPorPagina, setPreguntasPorPagina] = useState(1);  // Número de preguntas por página\n  const [paginaActual, setPaginaActual] = useState(1);  // Página actual\n  const [loading, setLoading] = useState(true);\n\n  // Fetch para obtener los datos del examen y las preguntas\n  useEffect(() => {\n    const fetchExamenData = async () => {\n      try {\n        const examenData = await getExamenById(examenId);\n\n        // Validar si el examenData tiene el campo preguntas_por_pagina\n        if (examenData && examenData.preguntas_por_pagina) {\n          setPreguntasPorPagina(examenData.preguntas_por_pagina || 1);  // Si no tiene valor, por defecto 1\n        } else {\n          console.error('Datos del examen incompletos o no disponibles.');\n        }\n\n        // Obtener las preguntas del examen\n        const response = await getPreguntasByExamen(examenId);\n        setPreguntas(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener los datos del examen o las preguntas:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchExamenData();\n  }, [examenId]);\n\n  // Calcular el número total de páginas basado en el número de preguntas y preguntas por página\n  const totalPaginas = Math.ceil(preguntas.length / preguntasPorPagina);\n\n  // Manejador de la selección de una respuesta\n  const handleSelectRespuesta = (preguntaId, opcionId) => {\n    setRespuestas({\n      ...respuestas,\n      [preguntaId]: opcionId,\n    });\n  };\n\n  // Función para ir a la siguiente página\n  const handleNextPage = () => {\n    if (paginaActual < totalPaginas) {\n      setPaginaActual(paginaActual + 1);\n    }\n  };\n\n  // Función para ir a la página anterior\n  const handlePreviousPage = () => {\n    if (paginaActual > 1) {\n      setPaginaActual(paginaActual - 1);\n    }\n  };\n\n  // Enviar las respuestas del examen\n  const handleSubmitExamen = async () => {\n    try {\n      await enviarRespuestas(examenId, respuestas);\n      navigate(`/examenes/${examenId}/resultado`);\n    } catch (error) {\n      console.error('Error al enviar las respuestas:', error);\n    }\n  };\n\n  // Mostrar un loader si aún está cargando las preguntas\n  if (loading) {\n    return <div>Cargando preguntas...</div>;\n  }\n\n  // Mostrar un mensaje si no hay preguntas en el examen\n  if (!preguntas || preguntas.length === 0) {\n    return <div>No hay preguntas disponibles para este examen.</div>;\n  }\n\n  // Obtener las preguntas para la página actual\n  const indiceInicial = (paginaActual - 1) * preguntasPorPagina;\n  const indiceFinal = indiceInicial + preguntasPorPagina;\n  const preguntasPaginaActual = preguntas.slice(indiceInicial, indiceFinal);\n\n  return (\n    <div className=\"realizar-examen-container\">\n      <h2>Realizando Examen</h2>\n      {preguntasPaginaActual.map((pregunta) => (\n        <div key={pregunta.id} className=\"pregunta-card\">\n          <h3>{pregunta.texto}</h3>\n          <ul className=\"opciones-list\">\n            {pregunta.opciones.map((opcion) => (\n              <li key={opcion.id}>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name={`pregunta-${pregunta.id}`}\n                    value={opcion.id}\n                    checked={respuestas[pregunta.id] === opcion.id}\n                    onChange={() => handleSelectRespuesta(pregunta.id, opcion.id)}\n                  />\n                  {opcion.texto}\n                </label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n\n      <div className=\"navegacion-buttons\">\n        <button onClick={handlePreviousPage} disabled={paginaActual === 1}>\n          Anterior\n        </button>\n        {paginaActual < totalPaginas ? (\n          <button onClick={handleNextPage}>Siguiente</button>\n        ) : (\n          <button onClick={handleSubmitExamen}>Enviar Examen</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RealizarExamen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}