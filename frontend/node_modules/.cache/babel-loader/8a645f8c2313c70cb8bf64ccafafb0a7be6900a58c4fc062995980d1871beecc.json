{"ast":null,"code":"var _jsxFileName = \"/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/pages/PreguntaList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPreguntasByExamen, deletePregunta } from '../services/preguntaService';\nimport { getExamenById } from '../services/examenService';\nimport CrearPregunta from './CrearPregunta';\nimport './PreguntaList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PreguntaList = () => {\n  _s();\n  const {\n    examenId\n  } = useParams();\n  const [preguntas, setPreguntas] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [examen, setExamen] = useState(null);\n  const [isCrearPreguntaModalOpen, setIsCrearPreguntaModalOpen] = useState(false);\n  const fetchPreguntas = async () => {\n    try {\n      const response = await getPreguntasByExamen(examenId);\n      setPreguntas(response.data);\n      const examenData = await getExamenById(examenId);\n      setExamen(examenData);\n    } catch (error) {\n      console.error('Error al obtener las preguntas:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPreguntas();\n  }, [examenId]);\n  const handleDelete = async preguntaId => {\n    if (window.confirm('¿Estás seguro de que deseas eliminar esta pregunta?')) {\n      try {\n        await deletePregunta(preguntaId);\n        fetchPreguntas(); // Actualizar la lista después de eliminar\n      } catch (error) {\n        console.error('Error al eliminar la pregunta:', error);\n      }\n    }\n  };\n  const openCrearPreguntaModal = () => setIsCrearPreguntaModalOpen(true);\n  const closeCrearPreguntaModal = () => setIsCrearPreguntaModalOpen(false);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando preguntas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pregunta-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Preguntas de \", examen ? examen.nombre : 'Desconocido']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openCrearPreguntaModal,\n      className: \"create-button\",\n      children: \"Crear Nueva Pregunta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: preguntas.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay preguntas en este examen.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this) : preguntas.map(pregunta => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"pregunta-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pregunta-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: pregunta.texto\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)\n      }, pregunta.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isCrearPreguntaModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-modal-button\",\n          onClick: closeCrearPreguntaModal,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CrearPregunta, {\n          closeModal: closeCrearPreguntaModal,\n          refreshPreguntas: fetchPreguntas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(PreguntaList, \"aBcssdVjUl4HD1UeD8udv2h1alY=\", false, function () {\n  return [useParams];\n});\n_c = PreguntaList;\nexport default PreguntaList;\nvar _c;\n$RefreshReg$(_c, \"PreguntaList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","getPreguntasByExamen","deletePregunta","getExamenById","CrearPregunta","jsxDEV","_jsxDEV","PreguntaList","_s","examenId","preguntas","setPreguntas","loading","setLoading","examen","setExamen","isCrearPreguntaModalOpen","setIsCrearPreguntaModalOpen","fetchPreguntas","response","data","examenData","error","console","handleDelete","preguntaId","window","confirm","openCrearPreguntaModal","closeCrearPreguntaModal","children","fileName","_jsxFileName","lineNumber","columnNumber","className","nombre","onClick","length","map","pregunta","texto","id","closeModal","refreshPreguntas","_c","$RefreshReg$"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/pages/PreguntaList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPreguntasByExamen, deletePregunta } from '../services/preguntaService';\nimport { getExamenById } from '../services/examenService';\nimport CrearPregunta from './CrearPregunta';\nimport './PreguntaList.css';\n\nconst PreguntaList = () => {\n  const { examenId } = useParams();\n  const [preguntas, setPreguntas] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [examen, setExamen] = useState(null);\n  const [isCrearPreguntaModalOpen, setIsCrearPreguntaModalOpen] = useState(false);\n\n  const fetchPreguntas = async () => {\n    try {\n      const response = await getPreguntasByExamen(examenId);\n      setPreguntas(response.data);\n\n      const examenData = await getExamenById(examenId);\n      setExamen(examenData);\n    } catch (error) {\n      console.error('Error al obtener las preguntas:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPreguntas();\n  }, [examenId]);\n\n  const handleDelete = async (preguntaId) => {\n    if (window.confirm('¿Estás seguro de que deseas eliminar esta pregunta?')) {\n      try {\n        await deletePregunta(preguntaId);\n        fetchPreguntas(); // Actualizar la lista después de eliminar\n      } catch (error) {\n        console.error('Error al eliminar la pregunta:', error);\n      }\n    }\n  };\n\n  const openCrearPreguntaModal = () => setIsCrearPreguntaModalOpen(true);\n  const closeCrearPreguntaModal = () => setIsCrearPreguntaModalOpen(false);\n\n  if (loading) {\n    return <div>Cargando preguntas...</div>;\n  }\n\n  return (\n    <div className=\"pregunta-list-container\">\n      <h2>Preguntas de {examen ? examen.nombre : 'Desconocido'}</h2>\n      <button onClick={openCrearPreguntaModal} className=\"create-button\">\n        Crear Nueva Pregunta\n      </button>\n\n      <ul>\n        {preguntas.length === 0 ? (\n          <p>No hay preguntas en este examen.</p>\n        ) : (\n          preguntas.map((pregunta) => (\n            <li key={pregunta.id} className=\"pregunta-card\">\n              <div className=\"pregunta-header\">\n                <strong>{pregunta.texto}</strong>\n                <div className=\"actions\">\n                  {/* Aquí se añadirá el modal para EditarPregunta */}\n                </div>\n              </div>\n            </li>\n          ))\n        )}\n      </ul>\n\n      {isCrearPreguntaModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <button className=\"close-modal-button\" onClick={closeCrearPreguntaModal}>×</button>\n            <CrearPregunta closeModal={closeCrearPreguntaModal} refreshPreguntas={fetchPreguntas} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PreguntaList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}