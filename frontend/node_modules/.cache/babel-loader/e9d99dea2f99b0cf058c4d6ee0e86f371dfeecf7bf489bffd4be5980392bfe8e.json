{"ast":null,"code":"// src/services/examenService.js\n\nimport axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000/gestion/api/';\n\n// Función para obtener el token del localStorage\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n};\nexport const getExamenes = async () => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const getExamenById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${id}/`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const createExamen = async examenData => {\n  try {\n    const response = await axios.post(`${API_URL}examenes/`, examenData, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error en la creación del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const updateExamen = async (id, examenData) => {\n  try {\n    const response = await axios.put(`${API_URL}examenes/${id}/`, examenData, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error en la actualización del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const deleteExamen = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}examenes/${id}/`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const getPreguntasByExamen = async examenId => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${examenId}/preguntas`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error(\"Error al obtener las preguntas:\", error.response ? error.response.data : error.message);\n    return {\n      data: []\n    }; // Devuelve un array vacío en caso de error\n  }\n};\nexport const getResultadoExamen = async resultadoId => {\n  return await axios.get(`${API_URL}resultados/${resultadoId}/`);\n};\nexport const enviarRespuestas = async (examenId, respuestasJSON) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/gestion/api/examenes/${examenId}/resultados/`, respuestasJSON, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al enviar las respuestas:', error);\n    throw error;\n  }\n};\nexport const uploadTxtExamen = async formData => {\n  return axios.post('http://localhost:8000/gestion/api/uploadtxt/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};","map":{"version":3,"names":["axios","API_URL","getAuthHeaders","token","localStorage","getItem","headers","Authorization","getExamenes","response","get","data","error","console","message","getExamenById","id","createExamen","examenData","post","updateExamen","put","deleteExamen","delete","getPreguntasByExamen","examenId","getResultadoExamen","resultadoId","enviarRespuestas","respuestasJSON","uploadTxtExamen","formData"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/services/examenService.js"],"sourcesContent":["// src/services/examenService.js\n\nimport axios from 'axios';\n\nconst API_URL = 'http://127.0.0.1:8000/gestion/api/';\n\n// Función para obtener el token del localStorage\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token'); \n  return {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    }\n  };\n};\n\nexport const getExamenes = async () => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const getExamenById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${id}/`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const createExamen = async (examenData) => {\n  try {\n    const response = await axios.post(`${API_URL}examenes/`, examenData, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error en la creación del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const updateExamen = async (id, examenData) => {\n  try {\n    const response = await axios.put(`${API_URL}examenes/${id}/`, examenData, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error en la actualización del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const deleteExamen = async (id) => {\n  try {\n    const response = await axios.delete(`${API_URL}examenes/${id}/`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const getPreguntasByExamen = async (examenId) => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${examenId}/preguntas`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error(\"Error al obtener las preguntas:\", error.response ? error.response.data : error.message);\n    return { data: [] }; // Devuelve un array vacío en caso de error\n  }\n};\n\n\nexport const getResultadoExamen = async (resultadoId) => {\n  return await axios.get(`${API_URL}resultados/${resultadoId}/`);\n};\n\n\n\n\nexport const enviarRespuestas = async (examenId, respuestasJSON) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/gestion/api/examenes/${examenId}/resultados/`, respuestasJSON, {\n      headers: {\n        'Content-Type': 'application/json', \n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al enviar las respuestas:', error);\n    throw error;\n  }\n};\n\n\n\nexport const uploadTxtExamen = async (formData) => {\n  return axios.post('http://localhost:8000/gestion/api/uploadtxt/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}