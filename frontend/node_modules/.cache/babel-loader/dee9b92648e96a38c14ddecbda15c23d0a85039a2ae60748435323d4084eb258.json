{"ast":null,"code":"var _jsxFileName = \"/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRole, setUserRole] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [username, setUsername] = useState(null); // Agregar estado para el nombre de usuario\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedRole = localStorage.getItem('role');\n    const storedUserId = localStorage.getItem('user_id');\n    const storedUsername = localStorage.getItem('username'); // Obtener username del almacenamiento\n\n    if (token) {\n      setIsAuthenticated(true);\n      setUserRole(storedRole);\n      setUserId(storedUserId);\n      setUsername(storedUsername); // Establecer el nombre de usuario\n    }\n  }, []);\n  const login = (token, role, user_id, user_name) => {\n    // Agregar user_name como parámetro\n    localStorage.setItem('token', token);\n    localStorage.setItem('role', role);\n    localStorage.setItem('user_id', user_id);\n    localStorage.setItem('username', user_name); // Almacenar username en el localStorage\n\n    setIsAuthenticated(true);\n    setUserRole(role);\n    setUserId(user_id);\n    setUsername(user_name); // Actualizar el estado del nombre de usuario\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    localStorage.removeItem('user_id');\n    localStorage.removeItem('username'); // Eliminar username del almacenamiento\n\n    setIsAuthenticated(false);\n    setUserRole(null);\n    setUserId(null);\n    setUsername(null); // Restablecer el estado de username\n  };\n  const updateUsername = newUsername => {\n    localStorage.setItem('username', newUsername);\n    setUsername(newUsername);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRole,\n      userId,\n      username,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"iQrMMZcZNK7JWD9f+QJRlaLx2Is=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userRole","setUserRole","userId","setUserId","username","setUsername","token","localStorage","getItem","storedRole","storedUserId","storedUsername","login","role","user_id","user_name","setItem","logout","removeItem","updateUsername","newUsername","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const [username, setUsername] = useState(null); // Agregar estado para el nombre de usuario\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const storedRole = localStorage.getItem('role');\r\n    const storedUserId = localStorage.getItem('user_id');\r\n    const storedUsername = localStorage.getItem('username'); // Obtener username del almacenamiento\r\n\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n      setUserRole(storedRole);\r\n      setUserId(storedUserId);\r\n      setUsername(storedUsername); // Establecer el nombre de usuario\r\n    }\r\n  }, []);\r\n\r\n  const login = (token, role, user_id, user_name) => { // Agregar user_name como parámetro\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('role', role);\r\n    localStorage.setItem('user_id', user_id);\r\n    localStorage.setItem('username', user_name); // Almacenar username en el localStorage\r\n\r\n    setIsAuthenticated(true);\r\n    setUserRole(role);\r\n    setUserId(user_id);\r\n    setUsername(user_name); // Actualizar el estado del nombre de usuario\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('role');\r\n    localStorage.removeItem('user_id');\r\n    localStorage.removeItem('username'); // Eliminar username del almacenamiento\r\n\r\n    setIsAuthenticated(false);\r\n    setUserRole(null);\r\n    setUserId(null);\r\n    setUsername(null); // Restablecer el estado de username\r\n  };\r\n\r\n  const updateUsername = (newUsername) => {\r\n    localStorage.setItem('username', newUsername);\r\n    setUsername(newUsername);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRole, userId, username, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}