{"ast":null,"code":"// src/services/examenService.js\n\nimport axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000/gestion/api/';\nexport const getExamenes = async () => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const getExamenesByUser = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/?user_id=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const getExamenById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${id}/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const createExamen = async examenData => {\n  try {\n    const response = await axios.post(`${API_URL}examenes/`, examenData);\n    return response.data;\n  } catch (error) {\n    console.error('Error en la creación del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const updateExamen = async (id, examenData) => {\n  try {\n    const response = await axios.put(`${API_URL}examenes/${id}/`, examenData);\n    return response.data;\n  } catch (error) {\n    console.error('Error en la actualización del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const deleteExamen = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}examenes/${id}/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\nexport const getPreguntasByExamen = async examenId => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${examenId}/preguntas`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error al obtener las preguntas:\", error.response ? error.response.data : error.message);\n    return {\n      data: []\n    }; // Devuelve un array vacío en caso de error\n  }\n};\nexport const getResultadoExamen = async resultadoId => {\n  return await axios.get(`${API_URL}resultados/${resultadoId}/`);\n};\nexport const enviarRespuestas = async (examenId, respuestasJSON) => {\n  try {\n    const response = await axios.post(`${API_URL}examenes/${examenId}/resultados/`, respuestasJSON, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al enviar las respuestas:', error);\n    throw error;\n  }\n};\nexport const uploadTxtExamen = async formData => {\n  return axios.post('http://localhost:8000/gestion/api/uploadtxt/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\nexport const getExamenesAsignados = async alumnoId => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/examenes-asignados/`, {\n      params: {\n        alumno_id: alumnoId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes asignados:', error);\n    throw error;\n  }\n};\nexport const getResultadosByExamen = async examenId => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${examenId}/resultados/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los resultados del examen:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getExamenes","response","get","data","error","console","message","getExamenesByUser","userId","getExamenById","id","createExamen","examenData","post","updateExamen","put","deleteExamen","delete","getPreguntasByExamen","examenId","getResultadoExamen","resultadoId","enviarRespuestas","respuestasJSON","headers","uploadTxtExamen","formData","getExamenesAsignados","alumnoId","params","alumno_id","getResultadosByExamen"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/services/examenService.js"],"sourcesContent":["// src/services/examenService.js\n\nimport axios from 'axios';\n\nconst API_URL = 'http://127.0.0.1:8000/gestion/api/';\n\n\n\nexport const getExamenes = async () => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\n\nexport const getExamenesByUser = async (userId) => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/?user_id=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const getExamenById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${id}/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const createExamen = async (examenData) => {\n  try {\n    const response = await axios.post(`${API_URL}examenes/`, examenData);\n    return response.data;\n  } catch (error) {\n    console.error('Error en la creación del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const updateExamen = async (id, examenData) => {\n  try {\n    const response = await axios.put(`${API_URL}examenes/${id}/`, examenData);\n    return response.data;\n  } catch (error) {\n    console.error('Error en la actualización del examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const deleteExamen = async (id) => {\n  try {\n    const response = await axios.delete(`${API_URL}examenes/${id}/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al eliminar el examen:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\nexport const getPreguntasByExamen = async (examenId) => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${examenId}/preguntas`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error al obtener las preguntas:\", error.response ? error.response.data : error.message);\n    return { data: [] }; // Devuelve un array vacío en caso de error\n  }\n};\n\n\nexport const getResultadoExamen = async (resultadoId) => {\n  return await axios.get(`${API_URL}resultados/${resultadoId}/`);\n};\n\n\n\n\nexport const enviarRespuestas = async (examenId, respuestasJSON) => {\n  try {\n    const response = await axios.post(`${API_URL}examenes/${examenId}/resultados/`, respuestasJSON, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al enviar las respuestas:', error);\n    throw error;\n  }\n};\n\n\nexport const uploadTxtExamen = async (formData) => {\n  return axios.post('http://localhost:8000/gestion/api/uploadtxt/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n};\n\n\nexport const getExamenesAsignados = async (alumnoId) => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/examenes-asignados/`, {\n      params: { alumno_id: alumnoId },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los exámenes asignados:', error);\n    throw error;\n  }\n};\n\nexport const getResultadosByExamen = async (examenId) => {\n  try {\n    const response = await axios.get(`${API_URL}examenes/${examenId}/resultados/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener los resultados del examen:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}