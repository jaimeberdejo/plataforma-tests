{"ast":null,"code":"var _jsxFileName = \"/Users/JB/Documents/TFG/frontend/src/pages/RealizarExamen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPreguntasByExamen, enviarRespuestas, getExamenById } from '../services/examenService';\nimport './RealizarExamen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealizarExamen = () => {\n  _s();\n  const {\n    examenId\n  } = useParams();\n  const navigate = useNavigate();\n  const [preguntas, setPreguntas] = useState([]);\n  const [respuestas, setRespuestas] = useState({});\n  const [preguntasPorPagina, setPreguntasPorPagina] = useState(1);\n  const [paginaActual, setPaginaActual] = useState(1);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchExamenData = async () => {\n      try {\n        const examenData = await getExamenById(examenId);\n        if (examenData && examenData.preguntas_por_pagina) {\n          setPreguntasPorPagina(examenData.preguntas_por_pagina || 1);\n        } else {\n          console.error('Datos del examen incompletos o no disponibles.');\n        }\n        const response = await getPreguntasByExamen(examenId);\n        setPreguntas(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener los datos del examen o las preguntas:', error);\n        setLoading(false);\n      }\n    };\n    fetchExamenData();\n  }, [examenId]);\n  const totalPaginas = Math.ceil(preguntas.length / preguntasPorPagina);\n  const handleSelectRespuesta = (preguntaId, opcionId) => {\n    setRespuestas({\n      ...respuestas,\n      [preguntaId]: opcionId\n    });\n  };\n  const handleNextPage = () => {\n    if (paginaActual < totalPaginas) {\n      setPaginaActual(paginaActual + 1);\n    }\n  };\n  const handlePreviousPage = () => {\n    if (paginaActual > 1) {\n      setPaginaActual(paginaActual - 1);\n    }\n  };\n  const handleSubmitExamen = async () => {\n    const tiempoEmpleado = 180;\n\n    // Asegurarse de que todas las preguntas estén en el objeto respuestas, incluidas las no contestadas\n    const respuestasCompletas = {};\n    preguntas.forEach(pregunta => {\n      // Si la pregunta no ha sido respondida, se asigna `null`\n      respuestasCompletas[pregunta.id] = respuestas[pregunta.id] || null;\n    });\n    const respuestasJSON = {\n      respuestas: respuestasCompletas,\n      // Aquí se envían todas las preguntas (respondidas o no)\n      tiempo_empleado: tiempoEmpleado // Enviar el tiempo en segundos u otro formato\n    };\n    try {\n      await enviarRespuestas(examenId, respuestasJSON); // Envía el JSON con las respuestas\n      navigate(`/examenes/${examenId}/resultado`);\n    } catch (error) {\n      console.error('Error al enviar las respuestas:', error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando preguntas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }, this);\n  }\n  if (!preguntas || preguntas.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No hay preguntas disponibles para este examen.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Obtener las preguntas para la página actual\n  const indiceInicial = (paginaActual - 1) * preguntasPorPagina;\n  const indiceFinal = indiceInicial + preguntasPorPagina;\n  const preguntasPaginaActual = preguntas.slice(indiceInicial, indiceFinal);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"realizar-examen-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Realizando Examen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), preguntasPaginaActual.map(pregunta => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pregunta-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: pregunta.texto\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"opciones-list\",\n        children: pregunta.opciones.map(opcion => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `pregunta-${pregunta.id}`,\n              value: opcion.id,\n              checked: respuestas[pregunta.id] === opcion.id,\n              onChange: () => handleSelectRespuesta(pregunta.id, opcion.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this), opcion.texto]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)\n        }, opcion.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, pregunta.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navegacion-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreviousPage,\n        disabled: paginaActual === 1,\n        children: \"Anterior\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), paginaActual < totalPaginas ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextPage,\n        children: \"Siguiente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitExamen,\n        children: \"Enviar Examen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(RealizarExamen, \"J04RXL1qJM+BOO1VkOKWymlN0PE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RealizarExamen;\nexport default RealizarExamen;\nvar _c;\n$RefreshReg$(_c, \"RealizarExamen\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","getPreguntasByExamen","enviarRespuestas","getExamenById","jsxDEV","_jsxDEV","RealizarExamen","_s","examenId","navigate","preguntas","setPreguntas","respuestas","setRespuestas","preguntasPorPagina","setPreguntasPorPagina","paginaActual","setPaginaActual","loading","setLoading","fetchExamenData","examenData","preguntas_por_pagina","console","error","response","data","totalPaginas","Math","ceil","length","handleSelectRespuesta","preguntaId","opcionId","handleNextPage","handlePreviousPage","handleSubmitExamen","tiempoEmpleado","respuestasCompletas","forEach","pregunta","id","respuestasJSON","tiempo_empleado","children","fileName","_jsxFileName","lineNumber","columnNumber","indiceInicial","indiceFinal","preguntasPaginaActual","slice","className","map","texto","opciones","opcion","type","name","value","checked","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/JB/Documents/TFG/frontend/src/pages/RealizarExamen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPreguntasByExamen, enviarRespuestas, getExamenById } from '../services/examenService'; \nimport './RealizarExamen.css';\n\nconst RealizarExamen = () => {\n  const { examenId } = useParams();\n  const navigate = useNavigate();\n\n  const [preguntas, setPreguntas] = useState([]);\n  const [respuestas, setRespuestas] = useState({});\n  const [preguntasPorPagina, setPreguntasPorPagina] = useState(1);  \n  const [paginaActual, setPaginaActual] = useState(1);  \n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchExamenData = async () => {\n      try {\n        const examenData = await getExamenById(examenId);\n\n        if (examenData && examenData.preguntas_por_pagina) {\n          setPreguntasPorPagina(examenData.preguntas_por_pagina || 1);  \n        } else {\n          console.error('Datos del examen incompletos o no disponibles.');\n        }\n\n        const response = await getPreguntasByExamen(examenId);\n        setPreguntas(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener los datos del examen o las preguntas:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchExamenData();\n  }, [examenId]);\n\n  const totalPaginas = Math.ceil(preguntas.length / preguntasPorPagina);  \n\n  const handleSelectRespuesta = (preguntaId, opcionId) => {\n    setRespuestas({\n      ...respuestas,\n      [preguntaId]: opcionId,\n    });\n  };\n\n  const handleNextPage = () => {\n    if (paginaActual < totalPaginas) {\n      setPaginaActual(paginaActual + 1);\n    }\n  };\n\n  const handlePreviousPage = () => {\n    if (paginaActual > 1) {\n      setPaginaActual(paginaActual - 1);\n    }\n  };\n\n  const handleSubmitExamen = async () => {\n    const tiempoEmpleado = 180; \n\n    // Asegurarse de que todas las preguntas estén en el objeto respuestas, incluidas las no contestadas\n    const respuestasCompletas = {};\n    preguntas.forEach((pregunta) => {\n      // Si la pregunta no ha sido respondida, se asigna `null`\n      respuestasCompletas[pregunta.id] = respuestas[pregunta.id] || null;\n    });\n\n    const respuestasJSON = {\n      respuestas: respuestasCompletas,  // Aquí se envían todas las preguntas (respondidas o no)\n      tiempo_empleado: tiempoEmpleado,  // Enviar el tiempo en segundos u otro formato\n    };\n\n    try {\n      await enviarRespuestas(examenId, respuestasJSON);  // Envía el JSON con las respuestas\n      navigate(`/examenes/${examenId}/resultado`);\n    } catch (error) {\n      console.error('Error al enviar las respuestas:', error);\n    }\n  };\n\n  if (loading) {\n    return <div>Cargando preguntas...</div>;\n  }\n\n  if (!preguntas || preguntas.length === 0) {\n    return <div>No hay preguntas disponibles para este examen.</div>;\n  }\n\n  // Obtener las preguntas para la página actual\n  const indiceInicial = (paginaActual - 1) * preguntasPorPagina;\n  const indiceFinal = indiceInicial + preguntasPorPagina;\n  const preguntasPaginaActual = preguntas.slice(indiceInicial, indiceFinal);\n\n  return (\n    <div className=\"realizar-examen-container\">\n      <h2>Realizando Examen</h2>\n      {preguntasPaginaActual.map((pregunta) => (\n        <div key={pregunta.id} className=\"pregunta-card\">\n          <h3>{pregunta.texto}</h3>\n          <ul className=\"opciones-list\">\n            {pregunta.opciones.map((opcion) => (\n              <li key={opcion.id}>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name={`pregunta-${pregunta.id}`}\n                    value={opcion.id}\n                    checked={respuestas[pregunta.id] === opcion.id}\n                    onChange={() => handleSelectRespuesta(pregunta.id, opcion.id)}\n                  />\n                  {opcion.texto}\n                </label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n\n      <div className=\"navegacion-buttons\">\n        <button onClick={handlePreviousPage} disabled={paginaActual === 1}>\n          Anterior\n        </button>\n        {paginaActual < totalPaginas ? (\n          <button onClick={handleNextPage}>Siguiente</button>\n        ) : (\n          <button onClick={handleSubmitExamen}>Enviar Examen</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RealizarExamen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}