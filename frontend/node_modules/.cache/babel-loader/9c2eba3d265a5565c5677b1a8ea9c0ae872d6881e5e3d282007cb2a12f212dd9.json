{"ast":null,"code":"// src/services/authService.js\n\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8000/auth'; // Cambia la URL según la configuración de tu backend\n\n// Registrar un nuevo usuario\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register/`, userData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Iniciar sesión y obtener el token de autenticación\nexport const loginUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/login/`, userData);\n    // Guardar el token en localStorage\n    localStorage.setItem('token', response.data.token);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Obtener el usuario actual a partir del token almacenado\nexport const getCurrentUser = () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n\n    // Decodificar el token para obtener la información del usuario\n    // Asegúrate de que tu backend incluya la información del usuario en el token JWT\n    const user = JSON.parse(atob(token.split('.')[1])); // Decodificar el payload del JWT\n    return user;\n  } catch (error) {\n    return null;\n  }\n};\n\n// Cerrar sesión\nexport const logoutUser = () => {\n  localStorage.removeItem('token');\n};\n\n// Verificar si el usuario está autenticado\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token; // Devuelve true si el token existe\n};","map":{"version":3,"names":["axios","API_URL","registerUser","userData","response","post","data","error","loginUser","localStorage","setItem","token","getCurrentUser","getItem","user","JSON","parse","atob","split","logoutUser","removeItem","isAuthenticated"],"sources":["/home/jaime/Documentos/TFG/plataforma-tests/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000/auth';  // Cambia la URL según la configuración de tu backend\r\n\r\n// Registrar un nuevo usuario\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register/`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Iniciar sesión y obtener el token de autenticación\r\nexport const loginUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login/`, userData);\r\n    // Guardar el token en localStorage\r\n    localStorage.setItem('token', response.data.token);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener el usuario actual a partir del token almacenado\r\nexport const getCurrentUser = () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return null;\r\n\r\n    // Decodificar el token para obtener la información del usuario\r\n    // Asegúrate de que tu backend incluya la información del usuario en el token JWT\r\n    const user = JSON.parse(atob(token.split('.')[1]));  // Decodificar el payload del JWT\r\n    return user;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\n// Cerrar sesión\r\nexport const logoutUser = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n// Verificar si el usuario está autenticado\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;  // Devuelve true si el token existe\r\n};\r\n\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4BAA4B,CAAC,CAAE;;AAE/C;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,YAAY,EAAEE,QAAQ,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOL,QAAQ,IAAK;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,SAAS,EAAEE,QAAQ,CAAC;IAChE;IACAM,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,QAAQ,CAACE,IAAI,CAACK,KAAK,CAAC;IAClD,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACF,MAAMD,KAAK,GAAGF,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE,OAAO,IAAI;;IAEvB;IACA;IACA,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;IACrD,OAAOJ,IAAI;EACb,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,UAAU,GAAGA,CAAA,KAAM;EAC9BV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMV,KAAK,GAAGF,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO,CAAC,CAACF,KAAK,CAAC,CAAE;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}