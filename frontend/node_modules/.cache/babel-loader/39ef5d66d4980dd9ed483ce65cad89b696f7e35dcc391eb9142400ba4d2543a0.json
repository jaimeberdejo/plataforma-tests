{"ast":null,"code":"var _jsxFileName = \"/Users/JB/Documents/TFG/frontend/src/pages/PreguntaList.js\",\n  _s = $RefreshSig$();\n// src/pages/PreguntaList.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { getPreguntasByExamen, getExamenById } from '../services/examenService'; // Asegúrate de importar getExamenById\nimport './PreguntaList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PreguntaList = () => {\n  _s();\n  const {\n    examenId\n  } = useParams();\n  const [preguntas, setPreguntas] = useState([]);\n  const [examen, setExamen] = useState(null); // Estado para almacenar la información del examen\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchPreguntas = async () => {\n      try {\n        const examenData = await getExamenById(examenId); // Obtener el examen por su ID\n        setExamen(examenData); // Guardar los datos del examen, incluyendo el nombre\n\n        const response = await getPreguntasByExamen(examenId);\n        setPreguntas(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener las preguntas o el examen:', error);\n        setLoading(false);\n      }\n    };\n    fetchPreguntas();\n  }, [examenId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando preguntas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pregunta-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Preguntas de \", examen ? examen.nombre : 'Desconocido']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/examenes/${examenId}/crear-pregunta`,\n      className: \"create-button\",\n      children: \"Crear Nueva Pregunta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: preguntas.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay preguntas en este examen.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this) : preguntas.map(pregunta => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"pregunta-card\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)\n      }, pregunta.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(PreguntaList, \"uGQtjPsJkyIEhFS+6zV8BqurzVA=\", false, function () {\n  return [useParams];\n});\n_c = PreguntaList;\nexport default PreguntaList;\nvar _c;\n$RefreshReg$(_c, \"PreguntaList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","getPreguntasByExamen","getExamenById","jsxDEV","_jsxDEV","PreguntaList","_s","examenId","preguntas","setPreguntas","examen","setExamen","loading","setLoading","fetchPreguntas","examenData","response","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","nombre","to","length","map","pregunta","texto","id","_c","$RefreshReg$"],"sources":["/Users/JB/Documents/TFG/frontend/src/pages/PreguntaList.js"],"sourcesContent":["// src/pages/PreguntaList.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { getPreguntasByExamen, getExamenById } from '../services/examenService'; // Asegúrate de importar getExamenById\nimport './PreguntaList.css';\n\nconst PreguntaList = () => {\n  const { examenId } = useParams();\n  const [preguntas, setPreguntas] = useState([]);\n  const [examen, setExamen] = useState(null); // Estado para almacenar la información del examen\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPreguntas = async () => {\n      try {\n        const examenData = await getExamenById(examenId); // Obtener el examen por su ID\n        setExamen(examenData); // Guardar los datos del examen, incluyendo el nombre\n\n        const response = await getPreguntasByExamen(examenId);\n        setPreguntas(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error al obtener las preguntas o el examen:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchPreguntas();\n  }, [examenId]);\n\n  if (loading) {\n    return <div>Cargando preguntas...</div>;\n  }\n\n  return (\n    <div className=\"pregunta-list-container\">\n      <h2>Preguntas de {examen ? examen.nombre : 'Desconocido'}</h2>\n      <Link to={`/examenes/${examenId}/crear-pregunta`} className=\"create-button\">\n        Crear Nueva Pregunta\n      </Link>\n      <ul>\n        {preguntas.length === 0 ? (\n          <p>No hay preguntas en este examen.</p>\n        ) : (\n          preguntas.map((pregunta) => (\n            <li key={pregunta.id} className=\"pregunta-card\">\n              <strong>{pregunta.texto}</strong>\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default PreguntaList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}